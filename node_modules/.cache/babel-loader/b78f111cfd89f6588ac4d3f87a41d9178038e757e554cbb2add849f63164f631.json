{"ast":null,"code":"import jsonData from'./available_timeslots.json';function formatDateToYYYYMMDD(date){const year=date.getFullYear();const month=String(date.getMonth()+1).padStart(2,'0');// Months are zero-based\nconst day=String(date.getDate()).padStart(2,'0');return\"\".concat(year,\"-\").concat(month,\"-\").concat(day);}function dateIsValid(selectedDateObj){const today=new Date();today.setHours(0,0,0,0);selectedDateObj.setHours(0,0,0,0);return selectedDateObj>=today;}function dateIsMorethanAWeekAway(selectedDateObj){const today=new Date();if(selectedDateObj.getMonth()===today.getMonth()&&selectedDateObj.getFullYear()===today.getFullYear()){//same mth and same year - check for day\nreturn selectedDateObj.getDate()>=today.getDate()+7;}else{return true;}}function dayOfWeek(date){const today=new Date();return(Number(date.getDate())-Number(today.getDate()))%7;}export const fetchAPI=date=>{// let reformattedDate = formatDateToYYYYMMDD(date); //reformatted to \"yyyy-mm-dd\"\nlet timeslotsArray=[];if(dateIsMorethanAWeekAway(date)&&dateIsValid(date)){timeslotsArray=['11:00','12:00','13:00','14:00','15:00','16:00','17:00',\"18:00\",'19:00','20:00','21:00','22:00','23:00'];}else if(dateIsValid(date)){jsonData.forEach(dateData=>{if(dayOfWeek(date)===Number(dateData.date)){dateData.time.forEach(timeslot=>{timeslotsArray.push(timeslot);});}});}timeslotsArray.unshift(\"===Select an available timeslot===\");return timeslotsArray;};export const submitAPI=formData=>true;const fakeAPI={fetchAPI:fetchAPI,submitAPI:submitAPI};export default fakeAPI;","map":{"version":3,"names":["jsonData","formatDateToYYYYMMDD","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","concat","dateIsValid","selectedDateObj","today","Date","setHours","dateIsMorethanAWeekAway","dayOfWeek","Number","fetchAPI","timeslotsArray","forEach","dateData","time","timeslot","push","unshift","submitAPI","formData","fakeAPI"],"sources":["C:/Users/kberl/Downloads/coursera-1/Little Lemon Web App/little-lemon-app/src/components/api.js"],"sourcesContent":["import jsonData from './available_timeslots.json'\r\n\r\n\r\nfunction formatDateToYYYYMMDD(date) {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nfunction dateIsValid(selectedDateObj){\r\n  const today = new Date();\r\n  today.setHours(0,0,0,0);\r\n  selectedDateObj.setHours(0,0,0,0);\r\n  return(\r\n    selectedDateObj >= today\r\n  )\r\n}\r\n\r\nfunction dateIsMorethanAWeekAway(selectedDateObj){\r\n    const today = new Date();\r\n    if(selectedDateObj.getMonth() === today.getMonth() && selectedDateObj.getFullYear() === today.getFullYear()){ //same mth and same year - check for day\r\n      return(selectedDateObj.getDate() >= today.getDate()+7);\r\n    }\r\n    else{\r\n      return true;\r\n    }\r\n}\r\n\r\nfunction dayOfWeek(date){\r\n  const today = new Date();\r\n  return(\r\n    (Number(date.getDate()) - Number(today.getDate())) % 7\r\n  )\r\n}\r\n\r\nexport const fetchAPI = (date) => {\r\n\r\n  // let reformattedDate = formatDateToYYYYMMDD(date); //reformatted to \"yyyy-mm-dd\"\r\n  let timeslotsArray = [];\r\n\r\n  if(dateIsMorethanAWeekAway(date) && dateIsValid(date)){\r\n    timeslotsArray = ['11:00','12:00','13:00','14:00','15:00','16:00', '17:00', \"18:00\", '19:00', '20:00', '21:00', '22:00', '23:00'];\r\n  }\r\n  else if(dateIsValid(date)){\r\n    jsonData.forEach((dateData) => {\r\n      if(dayOfWeek(date) === Number(dateData.date)){\r\n        dateData.time.forEach((timeslot) => {\r\n          timeslotsArray.push(timeslot);\r\n        });\r\n      }\r\n    })\r\n  }\r\n  timeslotsArray.unshift(\"===Select an available timeslot===\")\r\n  return timeslotsArray;\r\n};\r\n\r\nexport const submitAPI = formData => true;\r\n\r\nconst fakeAPI = {\r\nfetchAPI: fetchAPI,\r\nsubmitAPI: submitAPI,\r\n}\r\n\r\nexport default fakeAPI;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}