{"ast":null,"code":"import jsonData from './available_timeslots.json';\nfunction formatDateToYYYYMMDD(date) {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\nfunction dateIsValid(selectedDateObj) {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  selectedDateObj.setHours(0, 0, 0, 0);\n  return selectedDateObj >= today;\n}\nfunction dateIsMorethanAWeekAway(selectedDateObj) {\n  const today = new Date();\n  if (selectedDateObj.getMonth() === today.getMonth() && selectedDateObj.getFullYear() === today.getFullYear()) {\n    //same mth and same year - check for day\n    return selectedDateObj.getDate() >= today.getDate() + 7;\n  } else {\n    return true;\n  }\n}\nfunction dayOfWeek(date) {\n  const today = new Date();\n  return (Number(date.getDate()) - Number(today.getDate())) % 7;\n}\nexport const fetchAPI = date => {\n  // let reformattedDate = formatDateToYYYYMMDD(date); //reformatted to \"yyyy-mm-dd\"\n  let timeslotsArray = [];\n  if (dateIsMorethanAWeekAway(date) && dateIsValid(date)) {\n    timeslotsArray = ['11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', \"18:00\", '19:00', '20:00', '21:00', '22:00', '23:00'];\n  } else if (dateIsValid(date)) {\n    jsonData.forEach(dateData => {\n      if (dayOfWeek(date) === Number(dateData.date)) {\n        dateData.time.forEach(timeslot => {\n          timeslotsArray.push(timeslot);\n        });\n      }\n    });\n  }\n  timeslotsArray.unshift(\"===Select an available timeslot===\");\n  return timeslotsArray;\n};\nexport const submitAPI = formData => true;\nconst fakeAPI = {\n  fetchAPI: fetchAPI,\n  submitAPI: submitAPI\n};\nexport default fakeAPI;","map":{"version":3,"names":["jsonData","formatDateToYYYYMMDD","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","dateIsValid","selectedDateObj","today","Date","setHours","dateIsMorethanAWeekAway","dayOfWeek","Number","fetchAPI","timeslotsArray","forEach","dateData","time","timeslot","push","unshift","submitAPI","formData","fakeAPI"],"sources":["/Users/kimberleytay/Documents/GitHub/Little-Lemon-React-Web-App/src/components/api.js"],"sourcesContent":["import jsonData from './available_timeslots.json'\n\n\nfunction formatDateToYYYYMMDD(date) {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based\n  const day = String(date.getDate()).padStart(2, '0');\n\n  return `${year}-${month}-${day}`;\n}\n\nfunction dateIsValid(selectedDateObj){\n  const today = new Date();\n  today.setHours(0,0,0,0);\n  selectedDateObj.setHours(0,0,0,0);\n  return(\n    selectedDateObj >= today\n  )\n}\n\nfunction dateIsMorethanAWeekAway(selectedDateObj){\n    const today = new Date();\n    if(selectedDateObj.getMonth() === today.getMonth() && selectedDateObj.getFullYear() === today.getFullYear()){ //same mth and same year - check for day\n      return(selectedDateObj.getDate() >= today.getDate()+7);\n    }\n    else{\n      return true;\n    }\n}\n\nfunction dayOfWeek(date){\n  const today = new Date();\n  return(\n    (Number(date.getDate()) - Number(today.getDate())) % 7\n  )\n}\n\nexport const fetchAPI = (date) => {\n\n  // let reformattedDate = formatDateToYYYYMMDD(date); //reformatted to \"yyyy-mm-dd\"\n  let timeslotsArray = [];\n\n  if(dateIsMorethanAWeekAway(date) && dateIsValid(date)){\n    timeslotsArray = ['11:00','12:00','13:00','14:00','15:00','16:00', '17:00', \"18:00\", '19:00', '20:00', '21:00', '22:00', '23:00'];\n  }\n  else if(dateIsValid(date)){\n    jsonData.forEach((dateData) => {\n      if(dayOfWeek(date) === Number(dateData.date)){\n        dateData.time.forEach((timeslot) => {\n          timeslotsArray.push(timeslot);\n        });\n      }\n    })\n  }\n  timeslotsArray.unshift(\"===Select an available timeslot===\")\n  return timeslotsArray;\n};\n\nexport const submitAPI = formData => true;\n\nconst fakeAPI = {\nfetchAPI: fetchAPI,\nsubmitAPI: submitAPI,\n}\n\nexport default fakeAPI;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,4BAA4B;AAGjD,SAASC,oBAAoBA,CAACC,IAAI,EAAE;EAClC,MAAMC,IAAI,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;EAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EAC5D,MAAMC,GAAG,GAAGH,MAAM,CAACJ,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAEnD,OAAQ,GAAEL,IAAK,IAAGE,KAAM,IAAGI,GAAI,EAAC;AAClC;AAEA,SAASE,WAAWA,CAACC,eAAe,EAAC;EACnC,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxBD,KAAK,CAACE,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EACvBH,eAAe,CAACG,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EACjC,OACEH,eAAe,IAAIC,KAAK;AAE5B;AAEA,SAASG,uBAAuBA,CAACJ,eAAe,EAAC;EAC7C,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,IAAGF,eAAe,CAACL,QAAQ,CAAC,CAAC,KAAKM,KAAK,CAACN,QAAQ,CAAC,CAAC,IAAIK,eAAe,CAACR,WAAW,CAAC,CAAC,KAAKS,KAAK,CAACT,WAAW,CAAC,CAAC,EAAC;IAAE;IAC5G,OAAOQ,eAAe,CAACF,OAAO,CAAC,CAAC,IAAIG,KAAK,CAACH,OAAO,CAAC,CAAC,GAAC,CAAC;EACvD,CAAC,MACG;IACF,OAAO,IAAI;EACb;AACJ;AAEA,SAASO,SAASA,CAACf,IAAI,EAAC;EACtB,MAAMW,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,OACE,CAACI,MAAM,CAAChB,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,GAAGQ,MAAM,CAACL,KAAK,CAACH,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;AAE1D;AAEA,OAAO,MAAMS,QAAQ,GAAIjB,IAAI,IAAK;EAEhC;EACA,IAAIkB,cAAc,GAAG,EAAE;EAEvB,IAAGJ,uBAAuB,CAACd,IAAI,CAAC,IAAIS,WAAW,CAACT,IAAI,CAAC,EAAC;IACpDkB,cAAc,GAAG,CAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACnI,CAAC,MACI,IAAGT,WAAW,CAACT,IAAI,CAAC,EAAC;IACxBF,QAAQ,CAACqB,OAAO,CAAEC,QAAQ,IAAK;MAC7B,IAAGL,SAAS,CAACf,IAAI,CAAC,KAAKgB,MAAM,CAACI,QAAQ,CAACpB,IAAI,CAAC,EAAC;QAC3CoB,QAAQ,CAACC,IAAI,CAACF,OAAO,CAAEG,QAAQ,IAAK;UAClCJ,cAAc,CAACK,IAAI,CAACD,QAAQ,CAAC;QAC/B,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;EACAJ,cAAc,CAACM,OAAO,CAAC,oCAAoC,CAAC;EAC5D,OAAON,cAAc;AACvB,CAAC;AAED,OAAO,MAAMO,SAAS,GAAGC,QAAQ,IAAI,IAAI;AAEzC,MAAMC,OAAO,GAAG;EAChBV,QAAQ,EAAEA,QAAQ;EAClBQ,SAAS,EAAEA;AACX,CAAC;AAED,eAAeE,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}